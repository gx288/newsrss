import feedparser
import os
import json
import google.generativeai as genai
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from bs4 import BeautifulSoup
import re

# C·∫•u h√¨nh
RSS_FEED_URL = "https://cdn.24h.com.vn/upload/rss/suckhoedoisong.rss"
SHEET_ID = "14tqKftTqlesnb0NqJZU-_f1EsWWywYqO36NiuDdmaTo"
SHEET_NAME = os.getenv("SHEET_NAME", "Sheet1")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS")

# Danh s√°ch model ∆∞u ti√™n
MODEL_PRIORITY = ["gemini-2.5-flash", "gemini-2.5-pro", "gemini-2.5-flash-lite", "gemini-1.0-pro"]

# C·∫•u h√¨nh Google Gemini
genai.configure(api_key=GEMINI_API_KEY)

# Bi·∫øn theo d√µi t·ªïng qu√°t
processed_count = 0
skipped_count = 0
error_count = 0
ad_count = 0  # ƒê·∫øm s·ªë b√†i qu·∫£ng c√°o b·ªã b·ªè qua

# C·∫•u h√¨nh Google Sheets
def get_gspread_client():
    print("B·∫Øt ƒë·∫ßu c·∫•u h√¨nh Google Sheets client...")
    creds_dict = json.loads(GOOGLE_SHEETS_CREDENTIALS)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, ["https://www.googleapis.com/auth/spreadsheets"])
    client = gspread.authorize(creds)
    print("Ho√†n t·∫•t c·∫•u h√¨nh Google Sheets client.")
    return client

def get_existing_links():
    """L·∫•y danh s√°ch link ƒë√£ l∆∞u trong Google Sheet"""
    print("B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch link ƒë√£ x·ª≠ l√Ω t·ª´ Google Sheet...")
    try:
        client = get_gspread_client()
        sheet = client.open_by_key(SHEET_ID).worksheet(SHEET_NAME)
        links = sheet.col_values(3)[1:]  # B·ªè header
        print(f"ƒê√£ l·∫•y {len(links)} link t·ª´ Google Sheet.")
        return set(links)  # Chuy·ªÉn th√†nh set ƒë·ªÉ ki·ªÉm tra nhanh
    except Exception as e:
        print(f"L·ªói khi l·∫•y link t·ª´ Sheet: {str(e)}")
        return set()

def get_rss_feed():
    print("B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu t·ª´ RSS feed...")
    feed = feedparser.parse(RSS_FEED_URL)
    if not feed.entries:
        print("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o trong RSS feed.")
        return []
    existing_links = get_existing_links()
    articles = []
    for i, entry in enumerate(feed.entries, 1):
        print(f"ƒêang ki·ªÉm tra b√†i {i}: {entry.title}")
        link = entry.link
        if link in existing_links:
            print(f"B·ªè qua b√†i ƒë√£ x·ª≠ l√Ω: {entry.title}")
            global skipped_count
            skipped_count += 1
            continue
        title = entry.title
        description = entry.description
        pubdate = entry.get('published', entry.get('updated', ''))
        image_url = None
        soup = BeautifulSoup(description, 'html.parser')
        img_tag = soup.find('img')
        if img_tag and img_tag.get('src'):
            image_url = img_tag['src']
        articles.append({"title": title, "description": description, "link": link, "image_url": image_url, "pubdate": pubdate})
        print(f"ƒê√£ th√™m b√†i {len(articles)}: {title} v√†o danh s√°ch x·ª≠ l√Ω.")
    print(f"Ho√†n t·∫•t l·∫•y RSS feed: {len(articles)} b√†i m·ªõi s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω.")
    return articles

def is_advertisement(title, description):
    """Ki·ªÉm tra xem b√†i vi·∫øt c√≥ ph·∫£i l√† qu·∫£ng c√°o kh√¥ng"""
    ad_keywords = [
        r'\b(s·∫£n ph·∫©m|th∆∞∆°ng hi·ªáu|s·∫£n ph·∫©m|qu·∫£ng c√°o|khuy·∫øn m√£i|gi·∫£m gi√°|∆∞u ƒë√£i|mua ngay|ƒë·∫∑t h√†ng)\b',
        r'\b(gi·ªõi thi·ªáu|s·ª≠ d·ª•ng|ch·∫•t l∆∞·ª£ng cao|uy t√≠n|hi·ªáu qu·∫£ nh·∫•t)\b.*(th∆∞∆°ng hi·ªáu|s·∫£n ph·∫©m)',
        r'\b(ƒë·ªôc quy·ªÅn|ch·ªâ c√≥ t·∫°i|li√™n h·ªá ngay)\b'
    ]
    content = (title + " " + description).lower()
    for pattern in ad_keywords:
        if re.search(pattern, content, re.IGNORECASE):
            return True
    return False

def get_gemini_model():
    """Th·ª≠ c√°c model theo th·ª© t·ª± ∆∞u ti√™n"""
    for model_name in MODEL_PRIORITY:
        try:
            print(f"Th·ª≠ s·ª≠ d·ª•ng model: {model_name}")
            model = genai.GenerativeModel(model_name)
            # Th·ª≠ m·ªôt y√™u c·∫ßu nh·ªè ƒë·ªÉ ki·ªÉm tra quota
            model.generate_content("Test")
            print(f"S·ª≠ d·ª•ng model: {model_name}")
            return model
        except Exception as e:
            print(f"Model {model_name} kh√¥ng kh·∫£ d·ª•ng: {str(e)}")
    raise Exception("Kh√¥ng c√≥ model n√†o kh·∫£ d·ª•ng")

def rewrite_content(title, description):
    print(f"B·∫Øt ƒë·∫ßu t√≥m t·∫Øt b√†i: {title}")
    if is_advertisement(title, description):
        print(f"B·ªè qua b√†i '{title}' v√¨ c√≥ d·∫•u hi·ªáu qu·∫£ng c√°o.")
        global ad_count
        ad_count += 1
        return None, None
    prompt = f"{PROMPT}\nTi√™u ƒë·ªÅ: {title}\nM√¥ t·∫£: {description}"
    try:
        model = get_gemini_model()
        response = model.generate_content(prompt)
        content = response.text.strip()
        # X·ª≠ l√Ω ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ƒë√∫ng
        parts = content.split("üëáüëáüëá")
        if len(parts) < 2:
            print(f"ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi t·ª´ Gemini kh√¥ng h·ª£p l·ªá cho b√†i: {title}")
            return None, None
        summary_title = parts[0].strip()
        summary_content = parts[1].strip()
        # X√≥a "TI√äU ƒê·ªÄ: " n·∫øu c√≥
        summary_title = re.sub(r'^TI√äU ƒê·ªÄ:\s*', '', summary_title, flags=re.IGNORECASE)
        # X√≥a d·∫•u ** trong n·ªôi dung
        summary_title = summary_title.replace("**", "")
        summary_content = summary_content.replace("**", "")
        print(f"Ho√†n t·∫•t t√≥m t·∫Øt b√†i: {title}")
        return summary_title, summary_content
    except Exception as e:
        print(f"L·ªói khi t√≥m t·∫Øt b√†i {title}: {str(e)}")
        return None, None

def append_to_gsheet(title, summary_title, summary_content, link, image_url, pubdate):
    print(f"B·∫Øt ƒë·∫ßu ghi b√†i '{title}' v√†o Google Sheet...")
    client = get_gspread_client()
    sheet = client.open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    row = [title, summary_title + "\nüëáüëáüëá\n" + summary_content, link, image_url, pubdate]
    sheet.append_row(row)
    print(f"Ho√†n t·∫•t ghi b√†i '{title}' v√†o Google Sheet.")
    global processed_count
    processed_count += 1

def main():
    print("=== B·∫ÆT ƒê·∫¶U CH·∫†Y SCRIPT ===")
    articles = get_rss_feed()
    if not articles:
        print("Kh√¥ng c√≥ b√†i m·ªõi ƒë·ªÉ x·ª≠ l√Ω.")
        return
    for i, article in enumerate(articles, 1):
        print(f"\nX·ª≠ l√Ω b√†i {i}/{len(articles)}: {article['title']}")
        summary_title, summary_content = rewrite_content(article["title"], article["description"])
        if not summary_title or not summary_content:
            print(f"B·ªè qua b√†i '{article['title']}' do l·ªói t√≥m t·∫Øt ho·∫∑c qu·∫£ng c√°o.")
            global error_count
            error_count += 1
            continue
        append_to_gsheet(article["title"], summary_title, summary_content, article["link"], article["image_url"], article["pubdate"])
    print("\n=== T·ªîNG QU√ÅT ===")
    print(f"T·ªïng s·ªë b√†i x·ª≠ l√Ω th√†nh c√¥ng: {processed_count}")
    print(f"T·ªïng s·ªë b√†i b·ªè qua do tr√πng: {skipped_count}")
    print(f"T·ªïng s·ªë b√†i b·ªè qua do qu·∫£ng c√°o: {ad_count}")
    print(f"T·ªïng s·ªë b√†i l·ªói (t√≥m t·∫Øt th·∫•t b·∫°i): {error_count}")
    print("=== K·∫æT TH√öC SCRIPT ===")

if __name__ == "__main__":
    main()
